import sys
import json
import ollama
import json
import re
import os
# Convertir el dict a string JSON con indentaci√≥n para legibilidad
def generar_multi_busqueda(mensaje):
    with open('IA/ejemplos.json', 'r', encoding='utf-8') as f:
        template_json = json.load(f)

    # Convertir el dict a string JSON con indentaci√≥n para legibilidad
    template_str = json.dumps(template_json, indent=2, ensure_ascii=False)

    prompt = f"""
Sos un procesador de fechas de viajes. No sos programador, no sos explicador, no das sugerencias, no devolv√©s strings ni JSON ni texto. Solo devolv√© un array de objetos JavaScript puros, sin comillas extras ni texto ni c√≥digo.
üö® SOLO devolv√©s un JSON v√°lido, estrictamente as√≠:

[
  {{"departureDate": "05AUG", "returnDate": "19AUG"}},
  {{"departureDate": "06AUG", "returnDate": "20AUG"}}
]

Solo objetos as√≠, separados por coma y salto de l√≠nea. Nada m√°s ni menos.

REGLAS (en orden de prioridad):

1Ô∏è‚É£ D√çAS PUNTUALES  
Si el cliente menciona d√≠as espec√≠ficos separados por ‚Äúo‚Äù o ‚Äúy‚Äù (ejemplo: ‚Äúsalir el 2 o el 3 de agosto‚Äù), gener√° objetos solo para esos d√≠as exactos.

2Ô∏è‚É£ RANGOS EXPL√çCITOS  
Si el cliente indica ‚Äúpuedo salir entre X y Y de MES‚Äù, gener√° un objeto para cada d√≠a de X a Y inclusive.

3Ô∏è‚É£ DURACI√ìN DE ESTAD√çA  
Si el cliente indica ‚ÄúZ d√≠as‚Äù de duraci√≥n, sumale esos d√≠as a cada departureDate para calcular returnDate.

4Ô∏è‚É£ QUINCENAS  
‚Äúprimera quincena de MES‚Äù ‚Üí d√≠as 01 al 15  
‚Äúsegunda quincena de MES‚Äù ‚Üí d√≠as 16 al √∫ltimo d√≠a

5Ô∏è‚É£ SEMANAS  
‚Äúprimera semana‚Äù ‚Üí d√≠as 01‚Äì07  
‚Äúsegunda semana‚Äù ‚Üí d√≠as 08‚Äì14  
‚Äútercera semana‚Äù ‚Üí d√≠as 15‚Äì21  
‚Äúcuarta semana‚Äù ‚Üí d√≠as 22‚Äì√∫ltimo

6Ô∏è‚É£ PRIMEROS/√öLTIMOS D√çAS  
‚Äúlos primeros N d√≠as‚Äù ‚Üí 01‚Ä¶N  
‚Äúprincipios de MES‚Äù ‚Üí 01‚Äì05  
‚Äúprimeros d√≠as‚Äù ‚Üí 01‚Äì05  
‚Äú√∫ltimos d√≠as de MES‚Äù ‚Üí 25‚Äì√∫ltimo

7Ô∏è‚É£ VALIDACIONES  
Meses en ingl√©s MAY√öSCULAS (JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC).  
D√≠as con dos d√≠gitos (01, 02, 03, ‚Ä¶).  
No sumar d√≠as fuera de rango.  
Si no hay datos v√°lidos, devolver un array vac√≠o: []

MENSAJE DEL CLIENTE: {mensaje}

"""

    response = ollama.chat(
        model="llama3.2",
        messages=[{"role": "user", "content": prompt}],
        options={
            "temperature": 0
        }
    )
    content = response["message"]["content"]

    try:
        limpio = limpiar_json(content)
        fechas = json.loads(limpio)
    except Exception as e:
        print("Error al parsear fechas:", e)
        fechas = []

    return fechas

def generar_todo_lo_demas(mensaje):
       
    prompt2= f"""
Sos una IA que recibe mensajes en espa√±ol y debe devolver solo un √∫nico objeto JSON con las siguientes claves exactas:

- origenVuelta: c√≥digo IATA del destino detectado en el mensaje (ej: MIA, PUJ, MAD, etc.)
- adults: cantidad de adultos (mayores de 12 a√±os)
- children: cantidad de ni√±os (3 a 11 a√±os)
- infants: cantidad de beb√©s menores de 3 a√±os

Reglas:

- La persona que escribe viaja (1 adulto) salvo que se indique otra cosa.
- Frases como "mi esposa", "mi marido", "mi pareja", "mi amigo", etc., suman 1 adulto cada una.
- Menciones de ‚Äúmi hijo‚Äù, ‚Äúmis hijos‚Äù, ‚Äúlos nenes‚Äù, ‚Äúmi beb√©‚Äù indican ni√±os o infantes seg√∫n contexto.
- Infer√≠ cantidades aunque no haya n√∫meros exactos, con sentido com√∫n.
- Si no detect√°s ciudad destino o pasajeros, usar valores por defecto (1 adulto y origenVuelta vac√≠o).
- Completar todos los campos obligatorios, ning√∫n campo vac√≠o o nulo.

Para determinar el origenVuelta:

- Busc√° en el mensaje palabras o frases que indiquen la ciudad de destino (por ejemplo: "quiero viajar a Madrid", "me gustar√≠a ir a Punta Cana", "vamos a Canc√∫n", etc).
- Cuando detectes una de estas ciudades, asign√° el c√≥digo IATA correspondiente seg√∫n la siguiente tabla:

| Ciudad         | C√≥digo IATA |
|----------------|-------------|
| R√≠o de Janeiro | GIG         |
| S√£o Paulo      | GRU         |
| Madrid         | MAD         |
| Canc√∫n         | CUN         |
| Punta Cana     | PUJ         |

Solo devolver un √∫nico objeto JSON, sin texto adicional ni explicaciones.

MENSAJE DEL CLIENTE:
{mensaje}

  
"""

    respuesta = ollama.chat(
        model="llama3.2",
        messages=[{"role": "user", "content": prompt2}],
        options={
            "temperature": 0
        }
    )

    content = respuesta["message"]["content"]
    try:
       limpio = limpiar_json(content)
       params = json.loads(limpio)
    except Exception as e:
        print("Error al parsear par√°metros:", e)
        params = {}

    return params

def fusionar_resultados(fechas, parametros):
    resultado_semifinal = []
    if not fechas or not parametros:
        return resultado_semifinal  # retorna vac√≠o si fall√≥ algo antes

    if not isinstance(parametros, list):
        parametros = [parametros]

    for fecha in fechas:
        for param in parametros:
            combinado = param.copy()
            combinado['departureDate'] = fecha['departureDate']
            combinado['returnDate'] = fecha['returnDate']
            resultado_semifinal.append(combinado)

    return resultado_semifinal



def cargar_destinos():
    ruta_archivo = r'C:\Users\facun\FrancoMonolitico\vuelos-front\data\destinos.json'
    with open(ruta_archivo, 'r') as f:
        destinos = json.load(f)
    # Devolvemos un diccionario con clave origenVuelta para buscar f√°cil despu√©s
    return { destino["origenVuelta"]: destino for destino in destinos }

def completar_objetos_finales(lista_vuelos):
    # Ac√° ya no va hardcodeado, lo cargamos din√°micamente
    tabla_destinos = cargar_destinos()

    resultado_final = []

    for vuelo in lista_vuelos:
        origen = vuelo.get("origenVuelta", "")

        datos_destino = tabla_destinos.get(origen, {
            "maxDuracionIda": "",
            "maxDuracionVuelta": "",
            "horarioIdaEntre": "",
            "horarioIdaHasta": "",
            "horarioVueltaEntre": "",
            "horarioVueltaHasta": "",
            "stops": ""
        })

        vuelo_completo = {
            "mail": "franco@melincue.tur.ar",
            "password": "Francomase12!",
            "origenIda": "BUE",
            "origenVuelta": origen,
            "departureDate": vuelo.get("departureDate", ""),
            "returnDate": vuelo.get("returnDate", ""),
            "adults": vuelo.get("adults", 0),
            "children": vuelo.get("children", 0),
            "infants": vuelo.get("infants", 0),
            "currency": "USD",
            "checkedBaggage": False,
            "maxDuracionIda": datos_destino.get("maxDuracionIda", ""),
            "maxDuracionVuelta": datos_destino.get("maxDuracionVuelta", ""),
            "horarioIdaEntre": datos_destino.get("horarioIdaEntre", ""),
            "horarioIdaHasta": datos_destino.get("horarioIdaHasta", ""),
            "horarioVueltaEntre": datos_destino.get("horarioVueltaEntre", ""),
            "horarioVueltaHasta": datos_destino.get("horarioVueltaHasta", ""),
            "stops": datos_destino.get("stops", "")
        }

        resultado_final.append(vuelo_completo)

    return resultado_final


def limpiar_json(content):
    """
    Limpia el contenido de Ollama para dejar solo el JSON puro.
    """
    # Si viene envuelto en ```json ... ```
    content = re.sub(r"```json", "", content, flags=re.IGNORECASE)
    content = content.replace("```", "")
    
    # Sacar espacios y saltos innecesarios
    content = content.strip()
    
    return content



if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Error: falta el mensaje como argumento.")
        sys.exit(1)

    mensaje = sys.argv[1]
    fechas = generar_multi_busqueda(mensaje)
    parametros = generar_todo_lo_demas(mensaje)
    resultado = fusionar_resultados(fechas, parametros)
    resultadoFinal = completar_objetos_finales(resultado)
    print(json.dumps(resultadoFinal, indent=2, ensure_ascii=False))