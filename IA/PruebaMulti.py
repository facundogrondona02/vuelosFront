import sys
import json
import ollama
import json
import re
import os
from rapidfuzz import process, fuzz



def generar_multi_busqueda(mensaje):
    with open('IA/ejemplos_multi.json', 'r', encoding='utf-8') as f:
        ejemplos_json = json.load(f)

    prompt = f"""
‚ö†Ô∏è SOS UNA IA EXPERTA EN INTERPRETACI√ìN DE FECHAS DE VIAJE DESDE LENGUAJE NATURAL EN ESPA√ëOL.  Me voy con mi mujer y dos hijos a cancun entre el 8 y 11  hasta el 25 noviembre 
NO SOS UN CHATBOT, NO RESPOND√âS CON TEXTO, NO PROGRAM√ÅS, NO ACLAR√ÅS NADA. SOLO TRANSFORM√ÅS.

TU √öNICA FUNCI√ìN es transformar un mensaje de una persona en un ARRAY JSON v√°lido y NO VAC√çO que contenga fechas posibles de salida y regreso, en el siguiente formato ESTRICTO:

[
  {{"departureDate": "DDMMM", "returnDate": "DDMMM"}},
  ...
]

PRIMERO INTERPRETAS EL MENSAJE DEL CLIENTE Y ANALIZA QUE PUNTO DE LOS SIGUIENTES CUMPLE Y UTILIZAS SU LOGICA
---

### L√ìGICA FUNDAMENTAL QUE TEN√âS QUE ENTENDER:
8Ô∏è‚É£‚ö†Ô∏èCLAVE: Si El mensaje no menciona fechas espec√≠ficas solamente una duraci√≥n de estad√≠a, 
‚Üí DEB√âS asumir que la persona quiere viajar en cualquier fecha del mes indicado,
 Si el mensaje menciona algo como:
‚Äúme quiero ir 7 noches en septiembre‚Äù

‚Äúcualquier fecha de octubre, 10 noches‚Äù
...y NO hay fechas puntuales ni rangos espec√≠ficos,

‚Üí DEB√âS generar 5 combinaciones distribuidas uniformemente a lo largo del mes indicado, respetando la duraci√≥n expresada  
(üìå Ej: 7 noches = 7 d√≠as, 10 noches = 10 d√≠as, etc.)

‚ö†Ô∏è No deb√©s generar una secuencia corrida de d√≠as. Solo 5 combinaciones, **espaciadas y distribuidas a lo largo del mes** para cubrir distintas semanas posibles.

üìå Ejemplo:
Mensaje: ‚Äúqueremos viajar cualquier fecha de septiembre 7 noches a punta cana‚Äù
‚Üí Respuesta esperada:
[
  {{"departureDate": "04SEP", "returnDate": "11SEP"}},
  {{"departureDate": "08SEP", "returnDate": "15SEP"}},
  {{"departureDate": "13SEP", "returnDate": "20SEP"}},
  {{"departureDate": "18SEP", "returnDate": "25SEP"}},
  {{"departureDate": "23SEP", "returnDate": "30SEP"}}
]
------
‚ö†Ô∏è REGLA CR√çTICA PARA VIAJES EN "CUALQUIER FECHA" DEL MES:
Si el mensaje dice algo como ‚Äúcualquier fecha de [mes], [X] noches‚Äù o ‚Äúnos queremos ir en cualquier momento de [mes]‚Äù,
‚ö†Ô∏è DEB√âS generar exactamente 5 combinaciones, bien distribuidas en semanas distintas del mes.

‚ùå NO GENERES fechas seguidas como 01, 02, 03, 04, 05‚Ä¶
‚úÖ S√ç GENER√ÅS opciones como:
[
  {{"departureDate": "03SEP", "returnDate": "10SEP"}},
  {{"departureDate": "08SEP", "returnDate": "15SEP"}},
  {{"departureDate": "13SEP", "returnDate": "20SEP"}},
  {{"departureDate": "18SEP", "returnDate": "25SEP"}},
  {{"departureDate": "23SEP", "returnDate": "30SEP"}}
]
------
‚ö†Ô∏è Si el mensaje contiene √∫nicamente una duraci√≥n (como "7 noches en enero", "10 noches en septiembre") sin fechas espec√≠ficas ni rangos:
- DEB√âS generar **exactamente 5 combinaciones distintas de ida y vuelta**.
- **Cada salida debe estar espaciada al menos 4 o 5 d√≠as de la anterior.**
- Las fechas deben estar **distribuidas equitativamente a lo largo del mes** (no todas en la misma semana).
- No generes fechas corridas d√≠a por d√≠a.  

‚úÖ Ejemplo correcto para ‚Äú7 noches en enero‚Äù:
[
  {{"departureDate": "03JAN", "returnDate": "10JAN"}},
  {{"departureDate": "08JAN", "returnDate": "15JAN"}},
  {{"departureDate": "13JAN", "returnDate": "20JAN"}},
  {{"departureDate": "18JAN", "returnDate": "25JAN"}},
  {{"departureDate": "23JAN", "returnDate": "30JAN"}}
]


1Ô∏è‚É£ **Detectar todas las fechas de salida posibles** (departureDate) expresadas en el mensaje.  
   - Pueden ser d√≠as puntuales (ej: "el 4 de septiembre", "2 o 3 de agosto").  
   - Pueden ser rangos de d√≠as (ej: "entre el 10 y el 15 de julio").  
   - Pueden ser semanas o quincenas ("primera quincena de marzo", "segunda semana de mayo").  
   - Pueden ser expresiones gen√©ricas de tiempo ("principios de agosto", "√∫ltimos d√≠as de enero").

2Ô∏è‚É£ **Detectar fechas de regreso posibles** (returnDate).

   Existen DOS ESCENARIOS POSIBLES:

   ‚ñ∂Ô∏è CASO A: Fecha de regreso expl√≠cita
   - Si el mensaje menciona directamente una fecha de regreso, usando expresiones como:  
     "hasta el 25", "vuelvo el 10", "regreso el 3 de octubre", "vuelvo el domingo 24", etc.  
   - En ese caso, la fecha de regreso (returnDate) es FIJA y debe mantenerse igual en todos los objetos,  
     independientemente de cu√°ntas fechas de salida haya.

   ‚úÖ EJEMPLO:
   "puedo salir entre el 8 y el 11 de noviembre y vuelvo el 25"  
   ‚Üí returnDate fijo: "25NOV"  
   ‚Üí Resultado:
   [
     {{"departureDate": "08NOV", "returnDate": "25NOV"}},
     {{"departureDate": "09NOV", "returnDate": "25NOV"}},
     {{"departureDate": "10NOV", "returnDate": "25NOV"}},
     {{"departureDate": "11NOV", "returnDate": "25NOV"}}
   ]

   ‚ö†Ô∏è En este caso NO debe sumarse una duraci√≥n ficticia. La fecha indicada prevalece.

   ‚ñ∂Ô∏è CASO B: No hay fecha de regreso expl√≠cita, pero s√≠ duraci√≥n
   - Si el mensaje indica una duraci√≥n (ej: "2 semanas", "10 d√≠as", "una semana y media") pero no una fecha exacta de vuelta,
     entonces el returnDate debe calcularse de forma din√°mica y VARIABLE para cada fecha de salida.
   - Es decir, a cada departureDate se le suma la cantidad de d√≠as especificada para obtener un returnDate diferente por salida.

   ‚úÖ EJEMPLO:
   "puedo salir entre el 15 y el 20 de septiembre y me quedo 2 semanas"  
   ‚Üí Generar un returnDate para cada departureDate, sumando 14 d√≠as:
   [
     {{"departureDate": "15SEP", "returnDate": "29SEP"}},
     {{"departureDate": "16SEP", "returnDate": "30SEP"}},
     {{"departureDate": "17SEP", "returnDate": "01OCT"}},
     ...
   ]


3Ô∏è‚É£ **Si la suma de d√≠as para la fecha de regreso supera el l√≠mite del mes de salida, DEB√âS calcular correctamente la fecha que corresponde en el siguiente mes.**  
   - Por ejemplo, salir el 20SEP y quedarse 14 d√≠as ‚Üí volver el 04OCT.  
   - Esta suma debe considerar la duraci√≥n variable de cada mes y no generar fechas inv√°lidas.

4Ô∏è‚É£ **Generar un objeto para cada combinaci√≥n posible de salida y regreso** seg√∫n lo que el mensaje sugiere o implica.  
   - Por ejemplo, si hay dos d√≠as de salida posibles y un rango de d√≠as de regreso, gener√° todas las combinaciones posibles.  
   - Siempre asegurate que las fechas sean v√°lidas y no generes fechas fuera de calendario (ej: no 31FEB).

5Ô∏è‚É£ **Formato estricto y exacto**:  
   - D√≠a con dos d√≠gitos (01 a 31).  
   - Mes en ingl√©s y en MAY√öSCULAS: JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC.  
   - La respuesta debe ser SOLO el array JSON puro, sin texto, sin markdown, sin explicaciones, sin comillas extras ni caracteres adicionales.

6Ô∏è‚É£ **Nunca devolv√©s un array vac√≠o.**  
   - Si no encontr√°s fechas claras, hac√© un esfuerzo para interpretar el mensaje y generar al menos una opci√≥n plausible basada en duraci√≥n o l√≥gica.  
   - El objetivo es siempre devolver fechas v√°lidas y consistentes.

7Ô∏è‚É£ **No inventar meses o fechas.**  
   - Si no se especifica mes o es ambiguo, NO adivinar.  
   - Solo procesar y devolver fechas que est√©n claras en el mensaje o que puedan inferirse razonablemente.


‚ö†Ô∏è CLAVE:  
Si el mensaje menciona expl√≠citamente la fecha de regreso (ej: "hasta el 25", "vuelvo el 10 de agosto"),  
esa fecha debe usarse como valor fijo de `returnDate` en **todos** los objetos generados, sin excepci√≥n.

Solo cuando NO haya una fecha expl√≠cita, y haya una duraci√≥n de estad√≠a,  
el `returnDate` debe calcularse sumando los d√≠as correspondientes a cada `departureDate`.

NO mezclar l√≥gicas ni hacer ambas a la vez. Detect√° bien el caso y aplic√° solo una:

‚úÖ Si hay fecha expl√≠cita de vuelta ‚Üí returnDate fijo para todas las fechas de salida.  
‚úÖ Si NO hay fecha de regreso pero s√≠ duraci√≥n ‚Üí returnDate se calcula por suma, individualmente.

Nunca uses los dos criterios al mismo tiempo.

---

### EJEMPLOS DETALLADOS:

Ejemplo 1:  
Mensaje: "quiero ir a miami 2 semanas y puedo salir el 4 o 5 de septiembre"  
Respuesta:  
[  
  {{"departureDate": "04SEP", "returnDate": "18SEP"}},  
  {{"departureDate": "05SEP", "returnDate": "19SEP"}}  
]

Ejemplo 2:  
Mensaje: "puedo salir entre el 10 y el 12 de julio y volver el 20"  
Respuesta:  
[  
  {{"departureDate": "10JUL", "returnDate": "20JUL"}},  
  {{"departureDate": "11JUL", "returnDate": "20JUL"}},  
  {{"departureDate": "12JUL", "returnDate": "20JUL"}}  
]

Ejemplo 3:  
Mensaje: "salgo la primera quincena de marzo y me quedo 10 d√≠as"  
Respuesta:  
[  
  {{"departureDate": "01MAR", "returnDate": "11MAR"}},  
  {{"departureDate": "02MAR", "returnDate": "12MAR"}},  
  ...  
  {{"departureDate": "15MAR", "returnDate": "25MAR"}}  
]

Ejemplo 4:  
Mensaje: "solo puedo salir el 15 de agosto"  
Respuesta:  
[  
  {{"departureDate": "15AUG", "returnDate": "22AUG"}}  
]

Ejemplo 5:  
Mensaje: "entre el 20 y el 22 de septiembre y quiero quedarme dos semanas"  
Respuesta:  
[  
  {{"departureDate": "20SEP", "returnDate": "04OCT"}},  
  {{"departureDate": "21SEP", "returnDate": "05OCT"}},  
  {{"departureDate": "22SEP", "returnDate": "06OCT"}}  
]

Ejemplo 6:  
Mensaje: "entre el 5 y el 8 de octubre o el 12, vuelvo el 20"  
Respuesta:  
[  
  {{"departureDate": "05OCT", "returnDate": "20OCT"}},  
  {{"departureDate": "06OCT", "returnDate": "20OCT"}},  
  {{"departureDate": "07OCT", "returnDate": "20OCT"}},  
  {{"departureDate": "08OCT", "returnDate": "20OCT"}},  
  {{"departureDate": "12OCT", "returnDate": "20OCT"}}  
]

Ejemplo 7:  
Mensaje: "me gustar√≠a salir principios de noviembre y quedarme dos semanas"  
Respuesta:  
[  
  {{"departureDate": "01NOV", "returnDate": "15NOV"}},  
  {{"departureDate": "02NOV", "returnDate": "16NOV"}},  
  {{"departureDate": "03NOV", "returnDate": "17NOV"}},  
  {{"departureDate": "04NOV", "returnDate": "18NOV"}},  
  {{"departureDate": "05NOV", "returnDate": "19NOV"}}  
]

Ejemplo 8:
Mensaje: ‚Äúnos queremos ir en cualquier fecha de octubre, 10 noches a punta cana‚Äù
Respuesta:
[
  {{"departureDate": "02OCT", "returnDate": "12OCT"}},
  {{"departureDate": "08OCT", "returnDate": "18OCT"}},
  {{"departureDate": "14OCT", "returnDate": "24OCT"}},
  {{"departureDate": "20OCT", "returnDate": "30OCT"}},
  {{"departureDate": "25OCT", "returnDate": "04NOV"}}
]


Ejemplo 9:
Mensaje: ‚Äúcualquier fecha de enero 5 noches a cancun‚Äù
Respuesta:
[
  {{"departureDate": "03JAN", "returnDate": "08JAN"}},
  {{"departureDate": "08JAN", "returnDate": "13JAN"}},
  {{"departureDate": "13JAN", "returnDate": "18JAN"}},
  {{"departureDate": "18JAN", "returnDate": "23JAN"}},
  {{"departureDate": "23JAN", "returnDate": "28JAN"}}
]

Ejemplo 10:
Mensaje: ‚Äúcualquier fecha de septiembre, 7 noches‚Äù
Respuesta:
[
  {{"departureDate": "03SEP", "returnDate": "10SEP"}},
  {{"departureDate": "08SEP", "returnDate": "15SEP"}},
  {{"departureDate": "13SEP", "returnDate": "20SEP"}},
  {{"departureDate": "18SEP", "returnDate": "25SEP"}},
  {{"departureDate": "23SEP", "returnDate": "30SEP"}}
]

Ejemplo 11:
Mensaje: ‚Äúnos queremos ir a fines de agosto, 10 noches‚Äù
Respuesta:
[
  {{"departureDate": "20AUG", "returnDate": "30AUG"}},
  {{"departureDate": "23AUG", "returnDate": "02SEP"}},
  {{"departureDate": "25AUG", "returnDate": "04SEP"}},
  {{"departureDate": "27AUG", "returnDate": "06SEP"}},
  {{"departureDate": "29AUG", "returnDate": "08SEP"}}
]
---

### NOTAS IMPORTANTES:  
- "una semana" = 7 d√≠as  
- "7 noches" = 7 d√≠as
- "10 noches" = 10 d√≠as
- "dos semanas" = 14 d√≠as  
- Si hay varias fechas de salida y un rango de regreso, gener√° la combinaci√≥n completa.  
- Si la duraci√≥n no est√° expl√≠cita y no hay fecha de regreso, asum√≠ 7 d√≠as.  
- Si la fecha de regreso es anterior a la salida, descart√° esa combinaci√≥n.  
- No agregar texto extra, solo el array JSON v√°lido con doble llave en los objetos.

---
###################

Sos una IA que recibe mensajes en espa√±ol y debe devolver solo un √∫nico objeto JSON con las siguientes claves exactas:

- origenVuelta: lugar de destino, puede ser un ciudad o pais
- adults: cantidad de adultos (mayores de 12 a√±os)
- children: cantidad de ni√±os (3 a 11 a√±os)
- infants: cantidad de beb√©s menores de 3 a√±os


Reglas:

IMPORTANTE:  
- Siempre cuenta como 1 adulto la persona que env√≠a el mensaje, aunque no lo diga expl√≠citamente.  
- Cada vez que se mencione "mi esposa", "mi marido", "mi pareja", "mi mujer", etc., sum√° 1 adulto adicional.  
- Nunca devolv√©s valores cero para adultos si el mensaje indica "me quiero ir" o frases similares; al menos 1 adulto siempre debe estar presente.  
- No devuelvas arrays ni listas: SOLO un √∫nico objeto JSON con los campos requeridos.  
- Si no detect√°s destino, origenVuelta queda vac√≠o, pero no dejes campos vac√≠os ni con ceros que no correspondan a la l√≥gica.  
- Infer√≠ la cantidad de pasajeros con sentido com√∫n, incluso sin n√∫meros expl√≠citos.

- La persona que escribe viaja (1 adulto) salvo que se indique otra cosa.  
- Frases como "mi esposa", "mi marido", "mi pareja", "mi amigo","mi mujer", etc., suman 1 adulto cada una.  
- Menciones de ‚Äúmi hijo‚Äù, ‚Äúmis hijos‚Äù, ‚Äúlos nenes‚Äù, ‚Äúmi beb√©‚Äù indican ni√±os o infantes seg√∫n contexto.  
- Infer√≠ cantidades aunque no haya n√∫meros exactos, con sentido com√∫n.  
- Si no detect√°s ciudad destino o pasajeros, usar valores por defecto (1 adulto y origenVuelta vac√≠o).  
- Completar todos los campos obligatorios, ning√∫n campo vac√≠o o nulo.  
- Somos 2 personas, son 2 adultos. Siempre.
=======================
1. INTERPRETACI√ìN ROBUSTA DE PASAJEROS
=======================

üß† Tu tarea es detectar con precisi√≥n cu√°ntas personas viajan, clasificadas como:
- adults (12 a√±os o m√°s)
- children (de 2 a 11 a√±os)
- infants (menores de 2 a√±os)

‚úàÔ∏è CLAVES:
- Siempre asum√≠ que la persona que escribe viaja ‚Üí suma 1 adulto, **aunque no lo diga expl√≠citamente**.
- Mencion√° como adultos a cada persona nombrada con palabras como: "mi mam√°", "mi pap√°", "mi esposa", "mi pareja", "mi amigo", "mi hijo de 20", etc.
- Detect√° edades expl√≠citas:  
  - Si dice ‚Äútiene 23 a√±os‚Äù, o ‚Äúmi hijo de 14‚Äù ‚Üí contalo como **adulto**
  - Si dice ‚Äúmi hija de 8‚Äù ‚Üí contalo como **ni√±o**
  - Si dice ‚Äúmi beb√©‚Äù, ‚Äúde meses‚Äù, o edad menor a 2 ‚Üí **infante**
- Si solo dice ‚Äúmenor‚Äù, ‚Äúchiquito‚Äù, ‚Äúnene‚Äù ‚Üí asum√≠ **ni√±o**, salvo que diga claramente ‚Äúbeb√©‚Äù
- Nunca mezcles categor√≠as por error: un hijo de 23 **no puede ser ni√±o**
- Si dice ‚Äúmis 2 hijos, uno es beb√© y otro de 13‚Äù ‚Üí infante + adulto
- Si es ambiguo, asum√≠ la interpretaci√≥n m√°s l√≥gica y coherente con la edad o contexto.
- Cuando el mensaje dice "viajo a" o "quiero ir a" tenes que contar a la persona que escribio el mensaje como un adulto

IMPORTANTE:  
- Siempre cuenta como 1 adulto la persona que env√≠a el mensaje, aunque no lo diga expl√≠citamente.  
- Cada vez que se mencione "mi esposa", "mi marido", "mi pareja", "mi mujer", etc., sum√° 1 adulto adicional.  
- Nunca devolv√©s valores cero para adultos si el mensaje indica "me quiero ir" o frases similares; al menos 1 adulto siempre debe estar presente.  
- No devuelvas arrays ni listas: SOLO un √∫nico objeto JSON con los campos requeridos.  
- Si no detect√°s destino, origenVuelta queda vac√≠o, pero no dejes campos vac√≠os ni con ceros que no correspondan a la l√≥gica.  
- Infer√≠ la cantidad de pasajeros con sentido com√∫n, incluso sin n√∫meros expl√≠citos.

üë§ Ejemplos:

| Mensaje                                                            | adults | children | infants |
| ------------------------------------------------------------------ | ------ | -------- | ------- |
| "viajo con mi esposa y mis 2 hijos"                                | 2      | 2        | 0       |
| "yo, mi mam√° y mis dos hijos, uno es menor y otro de 23"           | 3      | 1        | 0       |
| "nos vamos mi se√±ora, mi hijo de 10 y el beb√©"                     | 2      | 1        | 1       |
| "viajamos mi hija de 14 y yo"                                      | 2      | 0        | 0       |
| "voy con mi esposa, mi hijo de 2 a√±os y el beb√©"                   | 2      | 1        | 1       |
| "me voy solo"                                                      | 1      | 0        | 0       |
| "me quiero ir"                                                     | 1      | 0        | 0       |
| "me quiero ir con mi esposa"                                       | 2      | 0        | 0       |
| "me quiero ir con mi hijo"                                         | 1      | 1        | 0       |
| "me quiero ir con mi hijo de 22"                                   | 2      | 0        | 0       |
| "me quiero ir con mi hijo de 22 y mi mam√°"                         | 3      | 0        | 0       |
| "quiero un viaje para 2 mayores y un menor"                        | 2      | 1        | 0       |
| "quiero ir a cancun 2 semanas"                                     | 1      | 0        | 0       |
| "me quiero ir con mi mujer y 2 hijos"                              | 2      | 2        | 0       |
| "me quiero ir con mi mujer y 2 hijos, uno de 3 y otro de 10"       | 2      | 1        | 1       |
| "me quiero ir con mi mam√° y mi esposa"                             | 3      | 0        | 0       |
| "viajamos con mi esposa, nuestros 3 hijos y el beb√©"               | 2      | 3        | 1       |
| "somos 4 adultos, 2 chicos y un beb√©"                              | 4      | 2        | 1       |
| "vamos mi pareja, mis dos hijos de 5 y 8 a√±os"                     | 2      | 2        | 0       |
| "voy con mis hijos, uno de 1 a√±o y otro de 12"                     | 2      | 0        | 1       |
| "vamos 2 adultos y un nene de 7"                                   | 2      | 1        | 0       |
| "yo, mi hermana y nuestras 3 hijas"                                | 2      | 3        | 0       |
| "mi esposa, yo, mi hija de 6 y mi beb√© de 6 meses"                 | 2      | 1        | 1       |
| "nos vamos con mi pareja y nuestros dos nenes de 4 y 6"            | 2      | 2        | 0       |
| "viajo con mi esposa y mi hijo de 1 a√±o y medio"                   | 2      | 0        | 1       |
| "somos dos adultos, un chico de 10 y una nena de 8"                | 2      | 2        | 0       |
| "me quiero ir con mi novia y su hijo de 5 a√±os"                    | 2      | 1        | 0       |
| "viajamos yo, mi mujer, nuestro hijo de 2 y nuestra beba"          | 2      | 1        | 1       |
| "voy con mis tres hijos, dos son chicos y uno es beb√©"             | 1      | 2        | 1       |
| "vamos 3 adultos y una nena de 9"                                  | 3      | 1        | 0       |
| "nos vamos 2 adultos con gemelos de 3 a√±os"                        | 2      | 2        | 0       |
| "viajamos mi esposo, yo y nuestros mellizos beb√©s"                 | 2      | 0        | 2       |
| "soy yo con mi hija de 11 y mi hijo de 13"                         | 2      | 1        | 0       |
| "voy con mi pap√° y mi hijo de 4 a√±os"                              | 2      | 1        | 0       |
| "viajo con mi hermana, mi cu√±ado y su hijo de 6"                   | 3      | 1        | 0       |
| "me quiero ir con mi esposa, mis dos hijos adolescentes y la beba" | 2      | 2        | 1       |
| "vamos 2 adultos y un hijo de 2 a√±os y otro de 1"                  | 2      | 1        | 1       |
| "mi mujer, mi hija de 10, mi hijo de 7 y yo"                       | 2      | 2        | 0       |
| "yo y mis dos hijos: uno de 15 y el otro de 10"                    | 2      | 1        | 0       |
| "yo, mi pareja, su hijo de 4 y el m√≠o de 6"                        | 2      | 2        | 0       |
| "me voy con mi abuela y mi hija de 5"                              | 2      | 1        | 0       |
| "viajamos dos mam√°s con tres chicos y un beb√©"                     | 2      | 3        | 1       |
| "yo, mi esposa y nuestra hija reci√©n nacida"                       | 2      | 0        | 1       |
----------------------------------------------------------------------------------------------------
Ejemplo 1:  
Mensaje: "me quiero ir con mi esposa 7 noches en septiembre a cancun"  
Respuesta:  
{{  
  "origenVuelta": "cancun",  
  "adults": 2,  
  "children": 0,  
  "infants": 0  
}}

Ejemplo 2:
Mensaje: "viajo solo a madrid la pr√≥xima semana"
Respuesta:
{{
  "origenVuelta": "madrid",
  "adults": 1,
  "children": 0,
  "infants": 0
}}

Ejemplo 3
Mensaje:"voy con mi marido y nuestros dos hijos a barcelona"
Respuesta JSON:
{{
  "origenVuelta": "barcelona",
  "adults": 2,
  "children": 2,
  "infants": 0
}}

Ejemplo 4
Mensaje:"quiero viajar con mi pareja y mi beb√© a canc√∫n"
Respuesta JSON:
{{
  "origenVuelta": "canc√∫n",
  "adults": 2,
  "children": 0,
  "infants": 1
}}

Ejemplo 5
Mensaje:"nos vamos con mi esposa, mi mam√° y mis dos hijos a roma"
Respuesta JSON:
{{
  "origenVuelta": "roma",
  "adults": 3,
  "children": 2,
  "infants": 0
}}

Ejemplo 6
Mensaje: "viajo con mis tres hijos, dos chicos y un beb√©, destino cancun"
Respuesta JSON:
{{
  "origenVuelta": "cancun",
  "adults": 1,
  "children": 2,
  "infants": 1
}}

------------
Para determinar el origenVuelta:
Tenes que interpretar el lugar donde quiere ir el cliente segun el mensaje, puede ser madrid, Cancun, o lo que sea tenes que ver el destino y rempazarlo en 'origenVuelta' del objeto final

Solo devolver un √∫nico objeto JSON, sin texto adicional ni explicaciones.



Junta los dos Json que creaste en uno solo, el primero con las fechas y el segundo con los pasajeros, y devolvelo como un array de objetos JSON.
### MENSAJE A PROCESAR:

"{mensaje}"

    """

    response = ollama.chat(
        model="llama3.2",
        messages=[{"role": "user", "content": prompt}],
        options={"temperature": 0}
    )
    content = response["message"]["content"]

    try:
        limpio = limpiar_json(content)  # asum√≠ que limpia el string para obtener JSON v√°lido
        fechas = json.loads(limpio)     # antes usabas json.loads(content) directamente, que fallaba
        if not fechas:
            raise ValueError("Array vac√≠o")
    except Exception as e:
        print(f"Error parseando JSON: {e}")
        fechas = []  # devolver un array vac√≠o o un fallback v√°lido
    return fechas

def obtener_codigos_iata_lista(destinos, ruta_json="data/codigoIATA.json"):
    if not isinstance(destinos, list):
        print("Error: Se esperaba una lista de objetos destino.")
        return destinos

    try:
        with open(ruta_json, "r", encoding="utf-8") as f:
            destinos_data = json.load(f)
    except Exception as e:
        print(f"Error cargando {ruta_json}: {e}")
        return destinos

    ciudades = [d["ciudad"].lower().strip() for d in destinos_data]

    for destino_obj in destinos:
        if not isinstance(destino_obj, dict):
            continue

        destino_usuario = destino_obj.get("origenVuelta", "").lower().strip()
        if not destino_usuario:
            continue

        mejor_coincidencia = process.extractOne(
            destino_usuario,
            ciudades,
            scorer=fuzz.WRatio
        )

        if mejor_coincidencia:
            ciudad_match, score, _ = mejor_coincidencia
            if score >= 70:
                for d in destinos_data:
                    if d["ciudad"].lower().strip() == ciudad_match:
                        destino_obj["origenVuelta"] = d["codigoIATA"]
                        break
            else:
                print(f"No coincidencia confiable para '{destino_usuario}' (score={score})")
        else:
            print(f"No se encontr√≥ ninguna coincidencia para '{destino_usuario}'")

    return destinos


def cargar_destinos():
    ruta_archivo = r'C:\Users\facun\FrancoMonolitico\vuelos-front\data\destinos.json'
    with open(ruta_archivo, 'r') as f:
        destinos = json.load(f)
    # Devolvemos un diccionario con clave origenVuelta para buscar f√°cil despu√©s
    return { destino["origenVuelta"]: destino for destino in destinos }

def completar_objetos_finales(lista_vuelos):
    # Ac√° ya no va hardcodeado, lo cargamos din√°micamente
    tabla_destinos = cargar_destinos()

    resultado_final = []

    for vuelo in lista_vuelos:
        origen = vuelo.get("origenVuelta", "")

        datos_destino = tabla_destinos.get(origen, {
            "maxDuracionIda": "",
            "maxDuracionVuelta": "",
            "horarioIdaEntre": "",
            "horarioIdaHasta": "",
            "horarioVueltaEntre": "",
            "horarioVueltaHasta": "",
            "stops": ""
        })

        vuelo_completo = {
            "mail": "franco@melincue.tur.ar",
            "password": "Francomase12!",
            "origenIda": "BUE",
            "origenVuelta": origen,
            "departureDate": vuelo.get("departureDate", ""),
            "returnDate": vuelo.get("returnDate", ""),
            "adults": vuelo.get("adults", 0),
            "children": vuelo.get("children", 0),
            "infants": vuelo.get("infants", 0),
            "currency": "USD",
            "checkedBaggage": False,
            "maxDuracionIda": datos_destino.get("maxDuracionIda", ""),
            "maxDuracionVuelta": datos_destino.get("maxDuracionVuelta", ""),
            "horarioIdaEntre": datos_destino.get("horarioIdaEntre", ""),
            "horarioIdaHasta": datos_destino.get("horarioIdaHasta", ""),
            "horarioVueltaEntre": datos_destino.get("horarioVueltaEntre", ""),
            "horarioVueltaHasta": datos_destino.get("horarioVueltaHasta", ""),
            "stops": datos_destino.get("stops", "")
        }

        resultado_final.append(vuelo_completo)

    return resultado_final


def limpiar_json(content):
    """
    Limpia el contenido de Ollama para dejar solo el JSON puro.
    """
    # Si viene envuelto en ```json ... ```
    content = re.sub(r"```json", "", content, flags=re.IGNORECASE)
    content = content.replace("```", "")
    
    # Sacar espacios y saltos innecesarios
    content = content.strip()
    
    return content



if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Error: falta el mensaje como argumento.")
        sys.exit(1)

    mensaje = sys.argv[1]
    todo = generar_multi_busqueda(mensaje)
    # parametros = generar_todo_lo_demas(mensaje)
    destinoFinal = obtener_codigos_iata_lista(todo)
    resultadoFinal = completar_objetos_finales(destinoFinal)
    print(json.dumps(resultadoFinal, indent=2, ensure_ascii=False))